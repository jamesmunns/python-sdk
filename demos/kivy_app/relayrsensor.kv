#:import get_color_from_hex kivy.utils.get_color_from_hex
<Label>:
    color: .3, .3, .3, 1

<MainWidget>:
    do_default_tab: False
    border: (0,0,0,0)
    background_image: ""
    tab_pos: 'top_mid'
    background_color: (0,0,0,0)

<DeviceWidget>:
    background_color: 0, 0, 0, 0
    on_state: self.bold = True if args[1] == 'down' else False
    name_label: name_label.__self__
    sensor_container: sensor_container.__self__
    main_container: main_container.__self__
    spacing: dp(10)

    BoxLayout:
        id: main_container
        orientation: 'vertical'
        Label:
            id: name_label
            size_hint_y: .2
        BoxLayout:
            id: sensor_container

<SensorWidget>:
    center_label: center_label.__self__
    orientation: 'vertical'
    size_hint_y: .5
    pos_hint: {"center_y": .5}
    canvas.before:
        Color:
            rgba: get_color_from_hex("ecececff")
        Line:
            circle: [self.center_x, self.center_y, min(self.width, self.height) / 2 - self.spacing - dp(10)]
            width: dp(10)
        Color:
            rgba: self.color
        Line:
            circle: [self.center_x, self.center_y, min(self.width, self.height) / 2 - self.spacing - dp(10), 0, self.angle]
            width: dp(10)
        Color:
            rgba: self.color if self.meaning == self.device.history.meaning else (0,0,0,0)
        Ellipse:
            size: dp(10), dp(10)
            pos: (self.x + self.width/2, self.y + self.height/2 - self.width/2 - dp(10)) if self.width < self.height else (self.x + self.width/2 + self.height/2 + dp(10), self.y + self.height/2)
    Label:
        id: center_label
        markup: True
        text_size: self.size
        valign: 'middle'
        halign: 'center'

<SensorHistoryWidget>:
    x_ticks_minor: 1
    x_ticks_major: 5
    y_ticks_major: 2
    padding: dp(5)
    x_grid_label: True
    y_grid_label: True
    xlabel: "Recorded, sec"
    x_grid: False
    y_grid: False
    draw_border: False
    size_hint_y: .4